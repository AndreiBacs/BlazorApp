@page "/fetchdata"

<PageTitle>Employees</PageTitle>

@inject IEmployeeService EmployeeService

<MudTable Items="@EmployeeService.Employees" Hover="true" OnRowClick="RowClickEvent" T="Employee" Loading="!EmployeeService.Employees.Any()" SortLabel="Sort By" Breakpoint="Breakpoint.Md" Striped="true">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Employee, object>(x=>x.FirstName)">Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Employee, object>(x=>x.LastName)">Vorname</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Employee, object>(x=>x.Department)">Abteilung</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Employee, object>(x=>x.EntryDate)">Eintrittsdatum</MudTableSortLabel>
        </MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Vorname">@context.LastName</MudTd>
        <MudTd DataLabel="Abteilung">@context.Department</MudTd>
        <MudTd DataLabel="Eintrittsdatum">@context.EntryDate.Value.ToShortDateString()</MudTd>
        <MudTd DataLabel="Action">
            <MudFab ButtonType="ButtonType.Button" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Delete" OnClick="@(async ()=> await Archive(@context))"></MudFab>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {

    [Parameter] public EventCallback<Employee> OnSelectEmployee { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await EmployeeService.GetEmployees();
    }

    private async void RowClickEvent(TableRowClickEventArgs<Employee> tableRowClickEventArgs)
    {
        await OnSelectEmployee.InvokeAsync(tableRowClickEventArgs.Item);
    }

    async void SelectItems(Employee employee)
    {
        await OnSelectEmployee.InvokeAsync(employee);
    }

    public async Task Archive(Employee employee)
    {
        EmployeeService.ArchiveEmployee(employee);
        await EmployeeService.GetEmployees();
        SelectItems(null);
    }
}
